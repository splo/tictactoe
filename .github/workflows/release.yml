name: Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
jobs:
  build:
    name: Build Game
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            runner: windows-latest
            os_dir: windows
          - target: x86_64-apple-darwin
            runner: macos-latest
            os_dir: mac
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            os_dir: linux
    steps:
      # Required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797.
      - name: Install LLVM and Clang
        if: runner.os == 'Windows'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "12"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        if: runner.os == 'Windows'
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Rust files
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            !target/builds/
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Install cargo-make
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --force cargo-make
      - name: Cache Godot files
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-godot-3.3.3
          path: |
            ~/AppData/Local/Godot
            ~/AppData/Roaming/Godot
            /Applications/Godot.app
            ~/Library/Application Support/Godot
            ~/.local/share/godot
      - name: Add Mesa OpenGL driver
        if: runner.os == 'Windows'
        continue-on-error: true
        shell: cmd
        run: |
          aria2c https://downloads.fdossena.com/Projects/Mesa3D/Builds/MesaForWindows-x64-20.1.8.7z
          7z e MesaForWindows-x64-20.1.8.7z
          mkdir %userprofile%\AppData\Local\Godot\godot.exe.local
          copy opengl32.dll %userprofile%\AppData\Local\Godot\godot.exe.local\
          dir %userprofile%\AppData\Local\Godot
          dir %userprofile%\AppData\Local\Godot\godot.exe.local
      - name: Build game binaries
        uses: actions-rs/cargo@v1
        with:
          command: make
          args: export
      - name: Get version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/*\//}
      - uses: actions/upload-artifact@v2
        with:
          name: tictactoe-${{ steps.get_version.outputs.VERSION }}-${{ matrix.os_dir }}
          path: target/builds/${{ matrix.os_dir }}

  release:
    name: Release Game
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: target/builds/artifacts
      - name: List artifacts
        run: find target/builds -type f
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            target/builds/artifacts/tictactoe-v${{ steps.get_version.outputs.VERSION }}-linux.zip
            target/builds/artifacts/tictactoe-v${{ steps.get_version.outputs.VERSION }}-mac.zip
            target/builds/artifacts/tictactoe-v${{ steps.get_version.outputs.VERSION }}-windows.zip
